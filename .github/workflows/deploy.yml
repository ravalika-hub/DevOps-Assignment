name: CI/CD Pipeline

on:
  push:
    branches: [main]

env:
  AWS_REGION: ap-south-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node and Python
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'


      - name: Install backend dependencies and test
        shell: bash
        run: |
          cd backend
          python3 -m venv venv
          source venv/bin/activate
          pip install -r requriements.txt
          pytest

      - name: Install frontend dependencies and test
        run: |
          cd frontend
          npm install
          npx playwright install --with-deps
          npx playwright test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push frontend Docker image
        run: |
          docker build -t frontend-app ./frontend
          docker tag frontend-app:latest 637423173059.dkr.ecr.ap-south-1.amazonaws.com/frontend-app:latest
          docker push 637423173059.dkr.ecr.ap-south-1.amazonaws.com/frontend-app:latest

      - name: Build and push backend Docker image
        run: |
          docker build -t backend-app ./backend
          docker tag backend-app:latest 637423173059.dkr.ecr.ap-south-1.amazonaws.com/backend-app:latest
          docker push 637423173059.dkr.ecr.ap-south-1.amazonaws.com/backend-app:latest

      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster devops-cluster --service frontend-service --force-new-deployment
          aws ecs update-service --cluster devops-cluster --service backend-service --force-new-deployment

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: terraform

